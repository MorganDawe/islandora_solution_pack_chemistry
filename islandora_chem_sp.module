<?php

/**
 * @file
 *
 * Provides the functionality to process and view chemical structure files.
 */
define('ISLANDORA_CHEM_SP_MODS_FORM_NAME', 'Islandora Chem MODS Form');

/**
 * Declare the objects that are required by this solution pack
 * @return type 
 */
function islandora_chem_sp_required_fedora_objects() {

  $module_path = drupal_get_path('module', 'islandora_chem_sp');

  // Put the form in the database
  module_load_include('inc', 'xml_form_builder', 'XMLFormDatabase');
  if (!XMLFormDatabase::Exists(ISLANDORA_CHEM_SP_MODS_FORM_NAME)) {
    $definition = new DOMDocument();
    $definition->load($module_path . '/xml/mods_chem.xml');
    XMLFormDatabase::Create(ISLANDORA_CHEM_SP_MODS_FORM_NAME, $definition);
  }

  // Associates the form with the content model
  $result = db_result(db_query('Select content_model from {islandora_content_model_forms} where  content_model = "%s" and form_name = "%s"', 'quantumchem:sp_chem', 'Islandora Chem MODS Form'));
  if (!$result) {
    $object = new stdClass();
    $object->content_model = 'quantumchem:sp_chem';
    $object->form_name = 'Islandora Chem MODS Form';
    $object->dsid = 'MODS';
    $object->title_field = "['titleInfo']['title']";
    $object->transform = 'mods_to_dc.xsl';
    $result = drupal_write_record('islandora_content_model_forms', $object);
  }

  return array(
    'islandora_chem_sp' => array(
      'module' => 'islandora_chem_sp',
      'title' => 'Islandora Chem Solution Pack',
      'objects' => array(
        array(
          'pid' => 'quantumchem:sp_chem',
          'label' => 'Islandora chemistry content model',
          'dsid' => 'ISLANDORACM',
          'datastream_file' => "$module_path/xml/CHEMCM.xml",
          'cmodel' => 'fedora-system:ContentModel-3.0',
        ),
        array(
          'pid' => 'quantumchem:sp_chem_collection',
          'label' => 'Chemistry Collection',
          'cmodel' => 'islandora:collectionCModel',
          'parent' => variable_get('fedora_repository_pid', 'islandora:root'),
          'datastreams' => array(
            array(
              'dsid' => 'TN',
              'datastream_file' => "$module_path/images/Crystal_Clear_filesystem_folder_chem.png",
              'mimetype' => 'image/png',
            ),
            array(
              'dsid' => 'COLLECTION_POLICY',
              'datastream_file' => "$module_path/xml/CHEM-COLLECTION POLICY.xml",
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Create the callbacks for each of the pages
 * @return array 
 */
function islandora_chem_sp_menu() {
  $items = array();
  $items['structure_search'] = array(
    'title' => t('Structure search'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_chem_sp_structure_search_form'),
    'type' => MENU_NORMAL_ITEM, //MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
  );

  $items['inchi_search'] = array(
    'title' => t('Structure search'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_chem_sp_inchi_search_form'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
  );

  $items['fragment_search'] = array(
    'title' => t('Fragment search'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_chem_sp_fragment_search_form'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
  );

  $items['substructure_search'] = array(
    'title' => t('Substructure search'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_chem_sp_substructure_search_form'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
  );

  $items['mw_search'] = array(
    'title' => t('Molecular weight search'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_chem_sp_mw_search_form'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Build a structure search page with the ChemDoodle drawing applet
 * @param type $form_state
 * @return string 
 */
function islandora_chem_sp_structure_search_form($form_state) {

  global $base_url;
  $pathTojs = drupal_get_path('module', 'islandora_chem_sp') . '/js/';

  $form = array();
//  Chemdoodleweb needs a newer version of jquery than drupal and so anything that requires jquery 
//  (like tabs) won't work alongside this editor
  drupal_add_css($pathTojs . 'ChemDoodleWeb/install/ChemDoodleWeb.css');
  drupal_add_css($pathTojs . 'ChemDoodleWeb/install/sketcher/jquery-ui-1.8.7.custom.css');
  drupal_add_js($pathTojs . 'ChemDoodleWeb/install/ChemDoodleWeb-libs.js');
  drupal_add_js($pathTojs . 'ChemDoodleWeb/install/ChemDoodleWeb.js');
  drupal_add_js($pathTojs . 'ChemDoodleWeb/install/sketcher/jquery-ui-1.8.7.custom.min.js');
  drupal_add_js($pathTojs . 'ChemDoodleWeb/install/sketcher/ChemDoodleWeb-sketcher.js');
// Setup the applet and create JS buttons underneath to search
  $content1 = <<<JS
    <script>
                     ChemDoodle.ELEMENT['H'].jmolColor = 'black';
 
  ChemDoodle.ELEMENT['S'].jmolColor = '#B9A130';
  // initializes the SketcherCanvas
  var sketcher = new ChemDoodle.SketcherCanvas('sketcher', 500, 300, '$pathTojs/ChemDoodleWeb/install/sketcher/icons/', ChemDoodle.featureDetection.supports_touch(), false);
  // sets terminal carbon labels to display
  sketcher.specs.atoms_displayTerminalCarbonLabels_2D = true;
  // sets atom labels to be colored by JMol colors, which are easy to recognize
  sketcher.specs.atoms_useJMOLColors = true;
  // the following two settings add overlap clear widths, so that some depth is introduced to overlapping bonds
  sketcher.specs.bonds_clearOverlaps_2D = true;
  sketcher.specs.bonds_overlapClearWidth_2D = 2;
  // the component needs to be repainted here because we do not call the <em>Canvas.loadMolecule()</em> function
  sketcher.repaint();
  
function molecule() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/inchi_search/" + wwmol;
 } 
 
 function fragment() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/fragment_search/" + wwmol;
 } 

function substructure() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/substructure_search/" + wwmol;
 } 
                 </script></BR>
JS;
//  These buttons just send the user to another drupal page with the MOL file as a parameter in the URL
//  This isn't particularly elegant but transferring data from the JS applet back to PHP is problematic
  $button = '<form><input type="button" value="Search" onclick="molecule()" /><input type="button" value="Fragment Search" onclick="fragment()" /><input type="button" value="Substructure Search" onclick="substructure()" /></form>';

  $form['sketcher'] = array(
    '#value' => $content1 . $button,
  );

  return $form;
}

/**
 * Transitional page for full structure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_inchi_search_form($form_state, $mol = NULL) {
// rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// Generate the inchikey from the MOL file and pass it to solr for searching
  exec("obabel \"$file\" -oinchi -xK", $inchi_key);

  drupal_goto('islandora/solr/search/cml.inchikey:' . $inchi_key[0]);
}

/**
 * Transitional page for fragment searching
 * Not sure if this is necessary now that we have substructure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_fragment_search_form($form_state, $mol = NULL) {
// rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// checkmol doesn't take the MOL file generated by the chemdoodle editor and so it 
// has to passed through openbabel first to get it properly formatted
  exec("obabel \"$file\" -omol -O\"$file\"");
  exec("checkmol -c \"$file\"", $fragment);
// Pass the fragments to solr to search for matches
  $fragments = str_replace(';', ' ', $fragment[0]);

  drupal_goto('islandora/solr/search/cml.fragments:' . $fragments);
}

/**
 * Transitional page for substructure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_substructure_search_form($form_state, $mol = NULL) {

  module_load_include('inc', 'islandora_chem_sp', 'helper');
// rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// Clean up the MOL file again as the chemdoodle editor doesn't do a great job
  exec("obabel \"$file\" -omol -O/tmp/tmp2.mol");
// Generate the db query for the fingerprint using the python script. Python is much better at 
// handling large numbers than PHP so as much of the work is done in the script and only the 
// query string is passed back
  exec('/usr/bin/python ' . drupal_get_path('module', 'islandora_chem_sp') . '/indigo-python-api-1.0.0-linux/fingerprint_search.py /tmp/tmp2.mol', $fingerprint);
// Use the fingerprint to look up the inchikey and pass this to solr for searching. Ideally I'd use 
// solr to search the fingerprint but it doesn't do bitwise comparisons so we need to use MySQL for
//  that bit
  $result = db_query("select inchikey from {islandora_chem_fingerprints} where" . $fingerprint[0]);

  while ($obj = db_fetch_object($result)) {
    $inchikey = $obj->inchikey;

    $inchikeys .= 'cml.inchikey:' . $inchikey . ' or ';
  }

  drupal_goto('islandora/solr/search/' . $inchikeys);
}

function islandora_chem_sp_mw_search_form($form_state) {

  $css = drupal_get_path('module', 'islandora_chem_sp') . '/islandora_chem_sp.css';
  drupal_add_css($css);

  $form['search_from'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#size' => 3,
    '#prefix' => '<div class="mw_range_from">',
    '#suffix' => '</div>',
  );

  $form['search_to'] = array(
    '#type' => 'textfield',
    '#title' => t('To'),
    '#size' => 3,
    '#prefix' => '<div class="mw_range_to">',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#prefix' => '<div class="mw_range_submit">',
    '#suffix' => '</div>',
  );

  return $form;
}

function islandora_chem_sp_mw_search_form_submit($form, &$form_state) {
  $from = $form_state['values']['search_from'];
  $to = $form_state['values']['search_to'];

  drupal_goto('/islandora/solr/search/cml.mw:[' . $from . '%20TO%20' . $to . ']/-');
}

function islandora_chem_sp_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Molecular weight search');
      $blocks[0]['cache'] = BLOCK_NO_CACHE;
      return $blocks;

    case 'view':
      $block['subject'] = t('Molecular weight search');

      $block['content'] = drupal_get_form('islandora_chem_sp_mw_search_form');

      return $block;
  }
}

function islandora_chem_sp_cron() {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'CollectionManagement');
  module_load_include('inc', 'fedora_repository', 'BatchIngest');
  
  $directory = '/var/www/drupal/sites/default/files/watch';
  $doNotAdd = array('.', '..', '__MACOSX');
  
  if ($inputs = opendir($directory)) {
    while (FALSE !== ($file_name = readdir($inputs))) {
      if (!in_array($file_name, $doNotAdd) && is_dir($file_name) == FALSE) {
        $ext = strrchr($file_name, '.');
        $base = preg_replace("/$ext$/", '', $file_name);
        $ext = substr($ext, 1);
        if ($ext) {
          $file_list[$base][$ext] = "$directory/" . $file_name;
        }
      }
    }
    closedir($inputs);
  }
  if (!$file_list == NULL) {
    $file_list = array_chunk($file_list, 5, TRUE);
    foreach ($file_list[0] as $label => $object_files) {
      create_batch_objects($label, 'quantumchem:sp_chem', $object_files, 'quantumchem:sp_chem_collection', 'quantumchem', '');
      $delete_ext = strrchr(array_shift(array_values($object_files)), '.');
        $delete_base = preg_replace("/$delete_ext$/", '', array_shift(array_values($object_files)));
        $mask = $delete_base . '.*';
        array_map("unlink", glob($mask));
    }
  }
}