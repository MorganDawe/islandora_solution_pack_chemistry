<?php

/**
 * Build a structure search page with the ChemDoodle drawing applet
 * @param type $form_state
 * @return string 
 */
function islandora_chem_sp_structure_search_form($form_state) {

  global $base_url;
  $pathTojs = drupal_get_path('module', 'islandora_chem_sp') . '/js/';

  $form = array();
//  Chemdoodleweb needs a newer version of jquery than drupal and so anything that requires jquery 
//  (like tabs) won't work alongside this editor
  drupal_add_css($pathTojs . 'ChemDoodleWeb/install/ChemDoodleWeb.css');
  drupal_add_css($pathTojs . 'ChemDoodleWeb/install/sketcher/jquery-ui-1.8.7.custom.css');
  drupal_add_js($pathTojs . 'ChemDoodleWeb/install/ChemDoodleWeb-libs.js');
  drupal_add_js($pathTojs . 'ChemDoodleWeb/install/ChemDoodleWeb.js');
  drupal_add_js($pathTojs . 'ChemDoodleWeb/install/sketcher/jquery-ui-1.8.7.custom.min.js');
  drupal_add_js($pathTojs . 'ChemDoodleWeb/install/sketcher/ChemDoodleWeb-sketcher.js');
// Setup the applet and create JS buttons underneath to search
  $content1 = <<<JS
    <script>
                     ChemDoodle.ELEMENT['H'].jmolColor = 'black';
 
  ChemDoodle.ELEMENT['S'].jmolColor = '#B9A130';
  // initializes the SketcherCanvas
  var sketcher = new ChemDoodle.SketcherCanvas('sketcher', 500, 300, '$pathTojs/ChemDoodleWeb/install/sketcher/icons/', ChemDoodle.featureDetection.supports_touch(), false);
  // sets terminal carbon labels to display
  sketcher.specs.atoms_displayTerminalCarbonLabels_2D = true;
  // sets atom labels to be colored by JMol colors, which are easy to recognize
  sketcher.specs.atoms_useJMOLColors = true;
  // the following two settings add overlap clear widths, so that some depth is introduced to overlapping bonds
  sketcher.specs.bonds_clearOverlaps_2D = true;
  sketcher.specs.bonds_overlapClearWidth_2D = 2;
  // the component needs to be repainted here because we do not call the <em>Canvas.loadMolecule()</em> function
  sketcher.repaint();
  
function molecule() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/inchi_search/" + wwmol;
 } 
 
 function fragment() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/fragment_search/" + wwmol;
 } 

function substructure() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/substructure/" + wwmol;
 } 
                 </script></BR>
JS;
//  These buttons just send the user to another drupal page with the MOL file as a parameter in the URL
//  This isn't particularly elegant but transferring data from the JS applet back to PHP is problematic
  $button = '<form><input type="button" value="Search" onclick="molecule()" /><input type="button" value="Fragment Search" onclick="fragment()" /><input type="button" value="Substructure Search" onclick="substructure()" /></form>';

  $form['sketcher'] = array(
    '#value' => $content1 . $button,
  );

  return $form;
}

/**
 * Transitional page for full structure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_inchi_search_form($form_state, $mol = NULL) {
// rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// Generate the inchikey from the MOL file and pass it to solr for searching
  exec("obabel \"$file\" -oinchi -xK", $inchi_key);

  drupal_goto('islandora/solr/search/cml.inchikey:' . $inchi_key[0]);
}

/**
 * Transitional page for fragment searching
 * Not sure if this is necessary now that we have substructure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_fragment_search_form($form_state, $mol = NULL) {
// rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// checkmol doesn't take the MOL file generated by the chemdoodle editor and so it 
// has to passed through openbabel first to get it properly formatted
  exec("obabel \"$file\" -omol -O\"$file\"");
  exec("checkmol -c \"$file\"", $fragment);
// Pass the fragments to solr to search for matches
  $fragments = str_replace(';', ' ', $fragment[0]);

  drupal_goto('islandora/solr/search/cml.fragments:' . $fragments);
}

function islandora_chem_sp_substructure_search_intermediate_form($form_state, $mol = NULL) {
  
  // rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// Clean up the MOL file again as the chemdoodle editor doesn't do a great job
  exec("obabel \"$file\" -omol -O/tmp/tmp2.mol");
// Generate the db query for the fingerprint using the python script. Python is much better at 
// handling large numbers than PHP so as much of the work is done in the script and only the 
// query string is passed back
  exec('/usr/bin/python ' . drupal_get_path('module', 'islandora_chem_sp') . '/indigo-python-api-1.0.0-linux/fingerprint_search.py /tmp/tmp2.mol', $fingerprint);
// Use the fingerprint to look up the inchikey and pass this to solr for searching. Ideally I'd use 
// solr to search the fingerprint but it doesn't do bitwise comparisons so we need to use MySQL for
//  that bit
  $result = db_query("select inchikey from {islandora_chem_fingerprints} where" . $fingerprint[0]);

  while ($obj = db_fetch_object($result)) {
    $inchikey = $obj->inchikey;

    $inchikeys .= 'cml.inchikey:' . $inchikey . ' or ';
  }
  
  $_SESSION['query'] = $inchikeys;
  drupal_goto('substructure_search');
}

/**
 * Transitional page for substructure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_substructure_search_form($form_state) {

  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrQueryProcessor');

//  drupal_set_breadcrumb($inchikeys);
//  drupal_goto('islandora/solr/search/' . $inchikeys);
  
  $inchikeys = $_SESSION['query'];
  $_SESSION['query'] = '';
  
  $output = islandora_solr_search($inchikeys);
  
//  var_dump($output);
  
  $form['search'] = array(
    '#value' => $output,
  );
  
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '');
  $breadcrumb[] = l(t('Structure search'), 'structure_search');
  $breadcrumb[] = t('Substructure search');
  drupal_set_breadcrumb($breadcrumb);
  
  return $form;
  
}

function islandora_chem_sp_mw_search_form($form_state) {

  $css = drupal_get_path('module', 'islandora_chem_sp') . '/islandora_chem_sp.css';
  drupal_add_css($css);

  $form['search_from'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#size' => 3,
    '#prefix' => '<div class="mw_range_from">',
    '#suffix' => '</div>',
  );

  $form['search_to'] = array(
    '#type' => 'textfield',
    '#title' => t('To'),
    '#size' => 3,
    '#prefix' => '<div class="mw_range_to">',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#prefix' => '<div class="mw_range_submit">',
    '#suffix' => '</div>',
  );

  return $form;
}

function islandora_chem_sp_mw_search_form_submit($form, &$form_state) {
  $from = $form_state['values']['search_from'];
  $to = $form_state['values']['search_to'];

  drupal_goto('/islandora/solr/search/cml.mw:[' . $from . '%20TO%20' . $to . ']/-');
}