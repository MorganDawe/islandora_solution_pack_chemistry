<?php

/**
 * @file
 */

/**
 * Build a structure search page with the ChemDoodle drawing applet
 * @param type $form_state
 * @return string 
 */
function islandora_chem_sp_structure_search_form($form_state) {

  global $base_url;
  $path_to_js = drupal_get_path('module', 'islandora_chem_sp') . '/js/';

  $form = array();
//  Chemdoodleweb needs a newer version of jquery than drupal and so anything that requires jquery 
//  (like tabs) won't work alongside this editor
  drupal_add_css($path_to_js . 'ChemDoodleWeb/install/ChemDoodleWeb.css');
  drupal_add_css($path_to_js . 'ChemDoodleWeb/install/sketcher/jquery-ui-1.8.7.custom.css');
  drupal_add_js($path_to_js . 'ChemDoodleWeb/install/ChemDoodleWeb-libs.js');
  drupal_add_js($path_to_js . 'ChemDoodleWeb/install/ChemDoodleWeb.js');
  drupal_add_js($path_to_js . 'ChemDoodleWeb/install/sketcher/jquery-ui-1.8.7.custom.min.js');
  drupal_add_js($path_to_js . 'ChemDoodleWeb/install/sketcher/ChemDoodleWeb-sketcher.js');
// Setup the applet and create JS buttons underneath to search
  $content1 = <<<JS
    <script>
                     ChemDoodle.ELEMENT['H'].jmolColor = 'black';
 
  ChemDoodle.ELEMENT['S'].jmolColor = '#B9A130';
  // initializes the SketcherCanvas
  var sketcher = new ChemDoodle.SketcherCanvas('sketcher', 500, 300, '$path_to_js/ChemDoodleWeb/install/sketcher/icons/', ChemDoodle.featureDetection.supports_touch(), false);
  // sets terminal carbon labels to display
  sketcher.specs.atoms_displayTerminalCarbonLabels_2D = true;
  // sets atom labels to be colored by JMol colors, which are easy to recognize
  sketcher.specs.atoms_useJMOLColors = true;
  // the following two settings add overlap clear widths, so that some depth is introduced to overlapping bonds
  sketcher.specs.bonds_clearOverlaps_2D = true;
  sketcher.specs.bonds_overlapClearWidth_2D = 2;
  // the component needs to be repainted here because we do not call the <em>Canvas.loadMolecule()</em> function
  sketcher.repaint();
  
function molecule() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/inchi_search/" + wwmol;
 } 
 
 function fragment() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/fragment_search/" + wwmol;
 } 

function substructure() {
  var mol = sketcher.getMolecule();
  var wmol = new ChemDoodle.io.MOLInterpreter();
  var wwmol = wmol.write(mol);

  wwmol = wwmol.replace( /:\/\//g, 'colon');
  wwmol = wwmol.replace( /\&/g, '&amp');
  wwmol = wwmol.replace( /\\n/g, '.nl.');
  wwmol = wwmol.replace( /\ /g, '.sp.');

  window.location = "$base_url/substructure/" + wwmol;
 } 
                 </script></BR>
JS;
//  These buttons just send the user to another drupal page with the MOL file as a parameter in the URL
//  This isn't particularly elegant but transferring data from the JS applet back to PHP is problematic
  $button = '<form><input type="button" value="Search" onclick="molecule()" /><input type="button" value="Fragment Search" onclick="fragment()" /><input type="button" value="Substructure Search" onclick="substructure()" /></form>';

  $form['sketcher'] = array(
    '#value' => $content1 . $button,
  );

  return $form;
}

/**
 * Transitional page for full structure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_inchi_search_form($form_state, $mol = NULL) {
  $_SESSION['mol'] = '';
// rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// Generate the inchikey from the MOL file and pass it to solr for searching
  exec("obabel \"$file\" -oinchi -xK", $inchi_key);
  $_SESSION['mol'] = trim($mol);
  drupal_goto('islandora/solr/search/cml.inchikey:' . $inchi_key[0]);
}

/**
 * Transitional page for fragment searching
 * Not sure if this is necessary now that we have substructure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_fragment_search_form($form_state, $mol = NULL) {
// rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// checkmol doesn't take the MOL file generated by the chemdoodle editor and so it 
// has to passed through openbabel first to get it properly formatted
  exec("obabel \"$file\" -omol -O\"$file\"");
  exec("checkmol -c \"$file\"", $fragment);
// Pass the fragments to solr to search for matches
  $fragments = str_replace(';', ' ', $fragment[0]);
  if ($fragment[0] != '') {
    $_SESSION['mol'] = trim($mol);
    drupal_goto('islandora/solr/search/cml.fragments:' . $fragments);
  }
  else {
    drupal_set_message(t('Sorry, but your search returned no results.'), 'warning');
    drupal_goto('structure_search');
  }
}

function islandora_chem_sp_substructure_search_intermediate_form($form_state, $mol = NULL) {

  // rebuild the MOL file that was passed in the URL
  $mol = str_replace('colon', '://', $mol);
  $mol = str_replace('.nl.', "\n", $mol);
  $mol = str_replace('.sp.', " ", $mol);

  $file = '/tmp/tmp.mol';
  $fh = fopen($file, 'w');
  fwrite($fh, $mol);
  fclose($fh);
// Clean up the MOL file again as the chemdoodle editor doesn't do a great job
  exec("obabel \"$file\" -omol -O/tmp/tmp2.mol");
// Generate the db query for the fingerprint using the python script. Python is much better at 
// handling large numbers than PHP so as much of the work is done in the script and only the 
// query string is passed back
  exec('/opt/ActivePython-2.7/bin/python ' . drupal_get_path('module', 'islandora_chem_sp') . '/indigo-python-api-1.0.0-linux/fingerprint_search.py /tmp/tmp2.mol', $fingerprint);
// Use the fingerprint to look up the inchikey and pass this to solr for searching. Ideally I'd use 
// solr to search the fingerprint but it doesn't do bitwise comparisons so we need to use MySQL for
//  that bit
  $result = db_query("select inchikey from {islandora_chem_fingerprints} where" . $fingerprint[0]);

  while ($obj = db_fetch_object($result)) {
    $inchikey = $obj->inchikey;

    $inchikeys .= 'cml.inchikey:' . $inchikey . ' or ';
  }

  if (isset($inchikey)) {
    $_SESSION['query'] = $inchikeys;
    $_SESSION['mol'] = trim($mol);
    drupal_goto('substructure_search');
  }
  else {
    drupal_set_message(t('Sorry, but your search returned no results.'), 'warning');
    drupal_goto('structure_search');
  }
}

/**
 * Transitional page for substructure searching
 * @param type $form_state
 * @param type $mol 
 */
function islandora_chem_sp_substructure_search_form($form_state) {

  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrQueryProcessor');
  module_load_include('inc', 'islandora_chem_sp', 'FileConversion');
  global $base_url;
  $path = drupal_get_path('module', 'islandora_chem_sp');
  $path_to_js = $path . '/js/';
  drupal_add_css($path . '/islandora_chem_sp_search.css');
  drupal_add_css($path_to_js . 'ChemDoodleWeb/install/sketcher/jquery-ui-1.8.7.custom.css');
  drupal_add_js($path_to_js . 'ChemDoodleWeb/install/ChemDoodleWeb-libs.js');
  drupal_add_js($path_to_js . 'ChemDoodleWeb/install/ChemDoodleWeb.js');
  drupal_add_js($path_to_js . 'ChemDoodleWeb/install/sketcher/jquery-ui-1.8.7.custom.min.js');
  drupal_add_js($path_to_js . 'ChemDoodleWeb/install/sketcher/ChemDoodleWeb-sketcher.js');

//  drupal_set_breadcrumb($inchikeys);
//  drupal_goto('islandora/solr/search/' . $inchikeys);
  $mol = $_SESSION['mol'];
  $inchikeys = $_SESSION['query'];
  $_SESSION['mol'] = NULL;

  $find = array("\n", "\r", "http://");
  $replace = array('\n', '', '');
  $mol = str_replace($find, $replace, $mol);

  $search_structure .= <<<JS
  <script>
  var viewmol = new ChemDoodle.ViewerCanvas('viewmol', 100, 100);
  viewmol.specs.backgroundColor = null;
  viewmol.specs.bonds_width_2D = .6;
  viewmol.specs.bonds_saturationWidth_2D = .18;
  viewmol.specs.bonds_hashSpacing_2D = 2.5;
  viewmol.specs.atoms_font_size_2D = 10;
  viewmol.specs.atoms_font_families_2D = ['Helvetica', 'Arial', 'sans-serif'];
  viewmol.specs.atoms_displayTerminalCarbonLabels_2D = true;
  viewmol.specs.atoms_useJMOLColors = true;
  var caffeineMolFile = "$mol";
  var caffeine = ChemDoodle.readMOL(caffeineMolFile);
  viewmol.loadMolecule(caffeine);
</script>
JS;

//  $headers = array();
//  $rows = array(
//    array(t('This is the structure you searched for:'), $search_structure,),
//  );
//  
//  $table = theme('table', $headers, $rows);
  $table = '<div class="search-text">' . t('This is the structure you searched for:') . '</div>';
  $table .= '<div class="search-mol">' . $search_structure . '</div>';

  $output = islandora_solr_search($inchikeys);

  $form['table'] = array(
    '#value' => $table,
  );

  $form['search'] = array(
    '#value' => $output,
  );

  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '');
  $breadcrumb[] = l(t('Structure search'), 'structure_search');
  $breadcrumb[] = t('Substructure search');
  drupal_set_breadcrumb($breadcrumb);

  return $form;
}

function islandora_chem_sp_mw_search_form(&$form_state) {

  $css = drupal_get_path('module', 'islandora_chem_sp') . '/islandora_chem_sp.css';
  drupal_add_css($css);

  $form['search_from'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#size' => 3,
    '#prefix' => '<div class="mw_range_from">',
    '#suffix' => '</div>',
  );

  $form['search_to'] = array(
    '#type' => 'textfield',
    '#title' => t('To'),
    '#size' => 3,
    '#prefix' => '<div class="mw_range_to">',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#name' => 'mw_submit',
    '#prefix' => '<div class="mw_range_submit">',
    '#suffix' => '</div>',
  );

//  $form['clear'] = array(
//    '#value' => '<div class="clearfix">',
//  );

  return $form;
}

function islandora_chem_sp_mw_search_form_submit($form, &$form_state) {
  $from = $form_state['values']['search_from'];
  $to = $form_state['values']['search_to'];

  drupal_goto('islandora/solr/search/cml.mw:[' . $from . '%20TO%20' . $to . ']/-');
}

function islandora_chem_sp_advanced_search_form(&$form_state) {
  $css = drupal_get_path('module', 'islandora_chem_sp') . '/islandora_chem_sp.css';
  drupal_add_css($css);
  
  $form = array();

  $form['first_tab'] = array(
    '#type' => 'tabpage',
    '#title' => t('Search'),
  );

  $form['first_tab']['tabs'] = array(
    '#type' => 'tabset',
  );

  $form['first_tab']['tabs']['text_search'] = array(
    '#type' => 'tabpage',
    '#title' => t('Search'),
    '#weight' => 1,
  );
  
  $form['first_tab']['tabs']['text_search']['simple_search'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div class="mw_range_submit">',
    '#suffix' => '</div>',
  );

  $form['first_tab']['tabs']['text_search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#name' => 'simple_submit',
    '#prefix' => '<div class="mw_range_submit">',
    '#suffix' => '</div>',
  );
  
  $form['first_tab']['tabs']['mw_search'] = array(
    '#type' => 'tabpage',
    '#title' => t('Molecular weight search'),
    '#weight' => 2,
  );
  
  $form['first_tab']['tabs']['mw_search']['search_from'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#size' => 3,
    '#prefix' => '<div class="mw_range_from">',
    '#suffix' => '</div>',
  );

  $form['first_tab']['tabs']['mw_search']['search_to'] = array(
    '#type' => 'textfield',
    '#title' => t('To'),
    '#size' => 3,
    '#prefix' => '<div class="mw_range_to">',
    '#suffix' => '</div>',
  );

  $form['first_tab']['tabs']['mw_search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#name' => 'mw_range_submit',
    '#prefix' => '<div class="mw_range_submit">',
    '#suffix' => '</div>',
  );

  $form['first_tab']['tabs']['advanced_search'] = array(
    '#type' => 'tabpage',
    '#title' => t('Advanced search'),
    '#weight' => 3,
  );

  drupal_add_js(drupal_get_path('module', 'scholar') . '/js/Ahah.js');
  drupal_add_css(drupal_get_path('module', 'scholar') . '/css/Search.css');
  $num_terms = 1;
  drupal_set_message('Values: ' . implode(', ', $form_state['values']));
  if (isset($form_state['values'])) {
    $values = $form_state['values'];
    $num_terms = isset($form_state['num_terms']) ? $form_state['num_terms'] : $num_terms;
  }
  elseif (isset($_SESSION['islandora_chem_sp']['search']['values'])) {
    /**
     * Handles the changing of URL from the initial search page to the actual search page.
     */
    $values = $_SESSION['islandora_chem_sp']['search']['values'];
    $num_terms = count($values['terms']);
    unset($_SESSION['islandora_chem_sp']['search']['values']); // Forget this for the next page visit.
  }
  $terms = array(
    '#prefix' => '<div id="islandora-chem-sp-search-terms">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  for ($i = 0; $i < $num_terms; $i++) {
    $term = array(
      '#tree' => TRUE,
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      'field' => array(
        '#title' => t('Field'),
        '#type' => 'select',
        '#default_value' => isset($values['terms'][$i]['field']) ? $values['terms'][$i]['field'] : 'mods.title',
        '#options' => array(
          'mods.abstract' => t('Abstract'),
          'mods.roleTerm' => t('Author Identifier'),
          'mods.Author' => t('Author'),
          'mods.title' => t('Title'),
          'mods.isbn' => t('ISBN'),
          'mods.issn' => t('ISSN'),
          'mods.hostTitle' => t('Full Journal Title'),
          'mods.type' => t('Publication Type'),
          'dc.title' => t('Title'),
          'mods.doi' => t('DOI'),
          'mods.subject' => t('Keywords'),
          'mods.date' => t('Year published'),
        )
      ),
      'search' => array(
        '#title' => t('Search'),
        '#type' => 'textfield',
        '#default_value' => isset($values['terms'][$i]['search']) ? $values['terms'][$i]['search'] : NULL,
      ),
      'hidden_submit' => array(// Used for when the user presses enter on the search field.
        '#type' => 'submit',
        '#name' => 'advanced_submit',
        '#value' => 'Search',
        '#attributes' => array('style' => 'visibility:hidden;position:fixed;top:-1000px;right:-1000px;')
      ),
      'add' => array(
        '#type' => 'button',
        '#value' => 'Add Field',
        '#ahah' => array(
          'path' => 'advanced_search/field/add',
          'wrapper' => 'islandora-chem-sp-search-terms',
          'method' => 'replace',
          'effect' => 'fade'
        )
      ),
    );
    if ($i > 0) {
      $term['remove'] = array(
        '#type' => 'button',
        '#field' => $i,
        '#value' => 'Remove Field',
        '#name' => 'remove-field-' . $i,
        '#ahah' => array(
          'path' => 'advanced_search/field/remove',
          'wrapper' => 'islandora-chem-sp-search-terms',
          'method' => 'replace',
          'effect' => 'fade'
        )
      );
    }
    $terms[] = $term;
  }
  $researchers = array();
  $result = file_get_contents('http://localhost:8080/solr/select/?q=rels.hasModel:researcherCModel&fl=mads.family,mads.given&rows=10000');
  $xml = new SimpleXMLElement($result);
  $array = $xml->xpath('//doc');
  foreach ($array as $arr) {
    $family = $arr->xpath('./arr[@name="mads.family"]/str');
    $given = $arr->xpath('./arr[@name="mads.given"]/str');
    $researchers[(string) $given[0] . ' ' . (string) $family[0]] = (string) $family[0] . ', ' . (string) $given[0];
    }

  asort($researchers);
  
  $form['first_tab'][ 'tabs']['advanced_search']['content'] = array(
    'terms' => $terms,
    'controls' => array(
      '#type' => 'markup',
      '#prefix' => '<div class="islandora-chem-sp-search-controls">',
      '#suffix' => '</div>',
      'sort' => array(
        '#title' => t('Sort By'),
        '#type' => 'select',
        '#default_value' => isset($values['sort']) ? $values['sort'] : NULL,
        '#options' => array(
          NULL => t('Relevance'),
          'mods.title' => t('Title'),
          'mods.date' => t('Date Added'),
        ),
      ),
      'order' => array(
        '#title' => t('Order'),
        '#type' => 'select',
        '#default_value' => isset($values['order']) ? $values['order'] : 'asc',
        '#options' => array(
          'asc' => t('Ascending'),
          'desc' => t('Descending'),
        ),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#name' => 'advanced_submit',
        '#value' => 'Search',
        '#button' => 'search',
      )
    ),
  );
  
  return $form;
}

function islandora_chem_sp_advanced_search_form_validate($form, &$form_state) {

  if ($form_state['values']['search_from'] != NULL && $form_state['values']['search_to'] == NULL) {
    form_set_error('', t('Both molecular weight boundaries need to be specified!'));
  }
  
  if ($form_state['values']['search_from'] == NULL && $form_state['values']['search_to'] != NULL) {
    form_set_error('', t('Both molecular weight boundaries need to be specified!'));
  }
  
}

function islandora_chem_sp_advanced_search_form_submit($form, &$form_state) {
  // Filter on the fields that are populated rather than the button that is pressed
  // This allows for people to press enter as well which registers as the first submit 
  // button that is specified.
//  krumo($form_state);
  if ($form_state['values']['simple_search'] != NULL) {
    islandora_chem_sp_simple_search_form_submit($form, $form_state);
    return;
  }
  if ($form_state['values']['search_from'] != NULL) {
    islandora_chem_sp_mw_search_form_submit($form, $form_state);
    return;
  }
  if ($form_state['values']['terms']['0']['search'] != NULL) {
    islandora_chem_sp_search_form_submit($form, $form_state);
    return;
  }
}

function islandora_chem_sp_search_form(array &$form_state) {
  drupal_add_js(drupal_get_path('module', 'scholar') . '/js/Ahah.js');
  drupal_add_css(drupal_get_path('module', 'scholar') . '/css/Search.css');
  $num_terms = 1;
  if (isset($form_state['values'])) {
    $values = $form_state['values'];
    $num_terms = isset($form_state['num_terms']) ? $form_state['num_terms'] : $num_terms;
  }
  elseif (isset($_SESSION['islandora_chem_sp']['search']['values'])) {
    /**
     * Handles the changing of URL from the initial search page to the actual search page.
     */
    $values = $_SESSION['islandora_chem_sp']['search']['values'];
    $num_terms = count($values['terms']);
    unset($_SESSION['islandora_chem_sp']['search']['values']); // Forget this for the next page visit.
  }
  $terms = array(
    '#prefix' => '<div id="islandora-chem-sp-search-terms">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  for ($i = 0; $i < $num_terms; $i++) {
    $term = array(
      '#tree' => TRUE,
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      'field' => array(
        '#title' => t('Field'),
        '#type' => 'select',
        '#default_value' => isset($values['terms'][$i]['field']) ? $values['terms'][$i]['field'] : 'mods.title',
        '#options' => array(
          'mods.abstract' => t('Abstract'),
          'mods.roleTerm' => t('Author Identifier'),
          'mods.Author' => t('Author'),
          'mods.title' => t('Title'),
          'mods.isbn' => t('ISBN'),
          'mods.issn' => t('ISSN'),
          'mods.hostTitle' => t('Full Journal Title'),
          'mods.type' => t('Publication Type'),
          'dc.title' => t('Title'),
          'mods.doi' => t('DOI'),
          'mods.subject' => t('Keywords'),
          'mods.date' => t('Year published'),
        )
      ),
      'search' => array(
        '#title' => t('Search'),
        '#type' => 'textfield',
        '#default_value' => isset($values['terms'][$i]['search']) ? $values['terms'][$i]['search'] : NULL,
      ),
      'hidden_submit' => array(// Used for when the user presses enter on the search field.
        '#type' => 'submit',
        '#name' => 'text_search',
        '#value' => 'Search',
        '#attributes' => array('style' => 'visibility:hidden;position:fixed;top:-1000px;right:-1000px;')
      ),
      'add' => array(
        '#type' => 'button',
        '#value' => 'Add Field',
        '#ahah' => array(
          'path' => 'advanced_search/field/add',
          'wrapper' => 'islandora-chem-sp-search-terms',
          'method' => 'replace',
          'effect' => 'fade'
        )
      ),
    );
    if ($i > 0) {
      $term['remove'] = array(
        '#type' => 'button',
        '#field' => $i,
        '#value' => 'Remove Field',
        '#name' => 'remove-field-' . $i,
        '#ahah' => array(
          'path' => 'advanced_search/field/remove',
          'wrapper' => 'islandora-chem-sp-search-terms',
          'method' => 'replace',
          'effect' => 'fade'
        )
      );
    }
    $terms[] = $term;
  }

  $researchers = array();
  $result = file_get_contents('http://localhost:8080/solr/select/?q=rels.hasModel:researcherCModel&fl=mads.family,mads.given&rows=10000');
  $xml = new SimpleXMLElement($result);
  $array = $xml->xpath('//doc');
  foreach ($array as $arr) {
    $family = $arr->xpath('./arr[@name="mads.family"]/str');
    $given = $arr->xpath('./arr[@name="mads.given"]/str');
    $researchers[(string) $given[0] . ' ' . (string) $family[0]] = (string) $family[0] . ', ' . (string) $given[0];
    }

  asort($researchers);
  
  return array(
    'terms' => $terms,
    'controls' => array(
      '#type' => 'markup',
      '#prefix' => '<div class="islandora-chem-sp-search-controls">',
      '#suffix' => '</div>',
      'sort' => array(
        '#title' => t('Sort By'),
        '#type' => 'select',
        '#default_value' => isset($values['sort']) ? $values['sort'] : NULL,
        '#options' => array(
          NULL => t('Relevance'),
          'mods.title' => t('Title'),
          'mods.date' => t('Date Added'),
        ),
      ),
      'order' => array(
        '#title' => t('Order'),
        '#type' => 'select',
        '#default_value' => isset($values['order']) ? $values['order'] : 'asc',
        '#options' => array(
          'asc' => t('Ascending'),
          'desc' => t('Descending'),
        ),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => 'Search',
        '#button' => 'search',
      )
    ),
  );
}

/**
 * Submit hook for the quick search form.
 * 
 * @param array $form
 * @param array $form_state 
 */
function islandora_chem_sp_search_form_submit(array $form, array &$form_state) {
//  $button = $form_state['clicked_button']['#button'];
  $order = $form_state['values']['order'];
//  if ($button == 'search') {
  $_SESSION['islandora_chem_sp']['search']['values'] = $form_state['values'];
  $_SESSION['islandora_chem_sp']['search']['sort'] = $form_state['values']['sort'];
  $_SESSION['islandora_chem_sp']['search']['order'] = $form_state['values']['order'];
  $query = islandora_chem_sp_search_form_build_query($form_state);
  $form_state['redirect'] = 'islandora/solr/search/' . urlencode($query) . '/'; // Redirect to the search.
//  }
//  else {
//    $query = $form_state['values']['author'];
//    $form_state['redirect'] = 'islandora/solr/search/mods.author:' . urlencode($query) . '/';
//  }
}

/**
 *
 * @param array $form_state 
 */
function islandora_chem_sp_search_form_build_query(array &$form_state) {
  $query = 'dc.title:*';
  $statements = array();
  foreach ($form_state['values']['terms'] as $term) {
    $field = $term['field'];
    $search = trim($term['search']);
    if (!empty($search)) {
      $statements[] = "$field:$search";
    }
  }
  $query = !empty($statements) ? implode(' AND ', $statements) : '*'; // Empty return all results. 
  return $query;
}

/**
 *
 * @param array $form_state 
 */
function islandora_chem_sp_search_form_store_sort_in_session(array &$form_state) {
  $sort = $form_state['values']['sort'];
  unset($_SESSION['islandora_chem_sp']['search']);
  if (!empty($sort)) {
    $order = $form_state['values']['order'];
    $_SESSION['islandora_chem_sp']['search']['sort'] = $sort . ' ' . $order;
  }
}

function islandora_chem_sp_search_advanced_add_field() {
  module_load_include('inc', 'xml_form_elements', 'Ahah');
  list($form_id, $form_build_id, $form, $form_state) = Ahah::getFormInfo();
  $form = Ahah::processForm($form_id, $form, $form_state);
  $form_state['num_terms'] = count(element_children($form['first_tab'][ 'tabs']['advanced_search']['content']['terms'])) + 1;
  $form = Ahah::rebuildForm($form_id, $form_build_id, $form, $form_state);
  Ahah::respond($form['first_tab']['tabs']['advanced_search']['content']['terms']);
}

function islandora_chem_sp_search_advanced_remove_field() {
  module_load_include('inc', 'xml_form_elements', 'Ahah');
  list($form_id, $form_build_id, $form, $form_state) = Ahah::getFormInfo();
  $form = Ahah::processForm($form_id, $form, $form_state);
  $field = $form_state['clicked_button']['#field'];
  array_splice($form_state['values']['terms'], $field, 1);
  $form_state['num_terms'] = count($form_state['values']['terms']);
  $form = Ahah::rebuildForm($form_id, $form_build_id, $form, $form_state);
  Ahah::respond($form['first_tab']['tabs']['advanced_search']['content']['terms']);
}

function islandora_chem_sp_simple_search_form_submit($form, $form_state) {
  $search = $form_state['values']['simple_search'];
  $url = 'islandora/solr/search/' . urlencode($search) . '/-/dismax';
  drupal_goto($url);
}